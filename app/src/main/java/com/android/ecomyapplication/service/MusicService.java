package com.android.ecomyapplication.service;

import android.app.Service;
import android.appwidget.AppWidgetManager;
import android.content.ComponentName;
import android.content.Intent;
import android.os.IBinder;
import android.util.Log;
import android.view.View;
import android.widget.RemoteViews;

import com.android.ecomyapplication.R;
import com.android.ecomyapplication.view.WidgetProvider;
import com.android.ecomyapplication.data.MusicLoader;
import com.android.ecomyapplication.model.Song;
import com.android.ecomyapplication.musicplayer.MusicPlayer;
import com.android.ecomyapplication.musicplayer.MusicPlayerCompletionListener;

import java.io.IOException;

import androidx.annotation.Nullable;

public class MusicService extends Service implements MusicPlayerCompletionListener {
    private static final String TAG = "Music Service";
    private static final int ONGOING_NOTIFICATION_ID = 1;
    private MusicPlayer player;
//    private MusicNotification mNotification;

    @Override
    public void onCreate() {

        Log.d(TAG, "onCreate()");

        player = new MusicPlayer(this);
        player.setOnCompletionListener(this);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        String action = intent.getAction() != null ? intent.getAction() : "";

        try {
            if (action.equals(WidgetProvider.ACTION_PLAY_PAUSE))
            {
                if (player.isPlaying())
                    pauseMusic();
                else{
                    playMusic();
                }
            }
            else if (action.equals(WidgetProvider.ACTION_STOP))
            {
                stopMusic();
            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return super.onStartCommand(intent, flags, startId);

    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onMusicCompletion() throws IOException {
        player.play();
        Song song = MusicLoader.getInstance(this).getCurrent();
        updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
    }

    private void pauseMusic()
    {
        Log.d(TAG, "PAUSE");
        if (player.isPlaying()){
            Song song = MusicLoader.getInstance(this).getCurrent();
            updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), false);

            player.pause();
            Log.d(TAG, "Music paused");
        }
    }



    private void updateUI(String title, String artist, String duration, Boolean isPlaying){
        // Update widget

        // We need to use the RemoteViews generated by the MusicWidget, class to make sure we preserve the pending intents for the buttons.
        // Otherwise the widget's buttons can stop responding to touch events.
        RemoteViews remoteViews = WidgetProvider.getRemoteViews(this);

        if (title != null && artist != null && duration != null){

           showViews(remoteViews);
            remoteViews.setTextViewText(R.id.textViewTitle, title);
            remoteViews.setTextViewText(R.id.textViewArtist, artist);
            remoteViews.setTextViewText(R.id.textViewDuration, duration);
        } else {
            hideViews(remoteViews);
        }


        if (isPlaying != null){
            if (isPlaying)
                remoteViews.setImageViewResource(R.id.butto1, R.drawable.play);
//            else
//                remoteViews.setImageViewResource(R.id.butto1, R.drawable.ic_play_arrow_white_36dp);
        }

//        boolean isShuffleOn = MusicLoader.getInstance(this).isShuffleOn();
//        if (isShuffleOn)
//            remoteViews.setImageViewResource(R.id.button_shuffle, R.drawable.shuffle_on);
//        else
//            remoteViews.setImageViewResource(R.id.button_shuffle, R.drawable.shuffle_off);

        ComponentName thisWidget = new ComponentName(this, WidgetProvider.class);
        AppWidgetManager manager = AppWidgetManager.getInstance(this);
        manager.updateAppWidget(thisWidget, remoteViews);

//        // Create/Update a notification, to run the service in foreground
//        if (artist != null && title != null) {
//            if (mNotification == null) {
////                mNotification = new MusicNotification(this, ONGOING_NOTIFICATION_ID, title, artist, isShuffleOn);
////                startForeground(ONGOING_NOTIFICATION_ID, mNotification.getNotification());
//            } else {
//                boolean isPlayingUnboxed = isPlaying != null ? isPlaying : false;
//              //  mNotification.update(title, artist, isPlayingUnboxed, isShuffleOn);
//            }
//        } else {
//            stopForeground(true);
//        }
    }


    private  void hideViews(RemoteViews remoteViews)
    {
        remoteViews.setViewVisibility(R.id.textViewArtist, View.GONE);
        remoteViews.setViewVisibility(R.id.textViewTitle,View.GONE);
        remoteViews.setViewVisibility(R.id.textViewDuration,View.GONE);
    }

    private void showViews(RemoteViews remoteViews)
    {
        remoteViews.setViewVisibility(R.id.textViewArtist, View.VISIBLE);
        remoteViews.setViewVisibility(R.id.textViewTitle,View.VISIBLE);
        remoteViews.setViewVisibility(R.id.textViewDuration,View.VISIBLE);
    }

    private void playMusic() throws IOException
    {
        Log.d(TAG, "PLAY");
        Song song = MusicLoader.getInstance(this).getCurrent();

        if (player.isPaused()) {
            player.play();
        }else{
            player.setSong(song);
            player.play();
        }

        updateUI(song.getTitle(), song.getArtist(), song.getDurationStr(), true);
        Log.i("Music Service", "Playing: " + song.getTitle());
    }





    private void stopMusic()
    {
        Log.d(TAG, "STOP MUSIC");

        player.stop();
        updateUI(null, null, null, false);
        MusicLoader.getInstance(this).close();

        stopSelf();
    }

}
